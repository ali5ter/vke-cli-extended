#!/usr/bin/env bash
# @file vke_wrapper
# To use this wrapper, create an alias:
#     alias vke='./vke_wrapper'
# To ignore this alias, use:
#     \vke ...
# Functionaliy introduced using this wrapper are to are listed in the README
# @author Alister Lewis-Bowen <alister@lewis-bowen.org>

[[ -n $DEBUG ]] && set -x
set -eou pipefail

VKE_FOLDERS=''
VKE_PROJECTS=''
VKE_FOLDER=''
VKE_PROJECT=''
VKE_CLUSTER=''
VKE_OBJ_NAME=''
VKE_VERSION=''
VKE_PASSTHROUGH='n'
VKE_BOLD="$(tput bold)"
VKE_RESET="$(tput sgr0)"
VKE_DUMMY_NAME='n0t-m3nt-t0-b3-f0und'

CMD="$*"

if [[ $# -gt 0 ]]; then

    ## Create a default region (the lowest ID)

    VKE_DEFAULT_REGION=$(vke -o json info region list | jq -r -s 'sort_by(.regionId) | .[] | .items[1] | .name')

    ## Rough attempt at guessing the resource name 

    VKE_RESOURCE_NAME="${@: -1}"

    ## Look for context (folder & project) overrides

    VKE_SUBCOMMAND=''

    while [[ $# -gt 0 ]]; do
        case "$1" in
            cluster )           VKE_SUBCOMMAND='cluster'; shift ;;
            -v | --version )
                ## Since --version has two meanings in the VKE cli...
                if [[ "$VKE_SUBCOMMAND" == 'cluster' ]]; then
                     VKE_VERSION="$2"; shift; shift
                fi
                shift ;;
            -h | --help )       VKE_PASSTHROUGH='y'; shift;;
            * ) shift ;;
        esac
    done

    if [[ "$VKE_PASSTHROUGH" == 'n' ]]; then
        [[ ("VKE_SUBCOMMAND" == 'cluster') && ("$CMD" =~  upgrade) && ( -z "${VKE_VERSION}") ]] && {
                # default to the latest version of K8s
                VKE_VERSION=$(vke -o json cluster versions list -r "$VKE_DEFAULT_REGION" | jq -r '.items[] | select(.isDefault == true) | .version')
                CMD="${CMD% *} -v $VKE_VERSION $VKE_RESOURCE_NAME"
            }
    fi
fi

## Pass it on

vke $CMD